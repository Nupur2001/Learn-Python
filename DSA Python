# 🐍 Python DSA Notes with Time Complexities & Code Examples

---

## 🧮 1. Arrays (Lists in Python)
```python
arr = [1, 2, 3, 4]

# Access
print(arr[2])  # O(1)

# Insert
arr.append(5)  # O(1)
arr.insert(2, 10)  # O(n)

# Delete
arr.pop()      # O(1)
arr.pop(1)     # O(n)

# Search
print(3 in arr)  # O(n)

# Sort
arr.sort()  # O(n log n)
```

---

## 📚 2. Strings
```python
s = "hello"

# Access
print(s[1])  # O(1)

# Concatenate
s2 = s + " world"  # O(n)

# Slice
print(s[1:4])  # O(k)

# Search
print("e" in s)  # O(n)

# Length
print(len(s))  # O(1)
```

---

## 🔁 3. Loops
```python
# Loop over array
arr = [1, 2, 3, 4]
for i in arr:  # O(n)
    print(i)
```

---

## 🔢 4. Recursion
```python
# Recursive Fibonacci
def fib(n):
    if n <= 1:
        return n
    return fib(n-1) + fib(n-2)  # O(2^n)

# Optimized with memoization
from functools import lru_cache

@lru_cache(None)
def fib_dp(n):  # O(n)
    if n <= 1:
        return n
    return fib_dp(n-1) + fib_dp(n-2)
```

---

## 🧺 5. Hash Tables (dict / set)
```python
# Dictionary
d = {'a': 1, 'b': 2}
d['c'] = 3       # Insert - O(1)
print(d['a'])    # Access - O(1)
del d['b']       # Delete - O(1)
print('c' in d)  # Search - O(1)

# Set
s = {1, 2, 3}
s.add(4)         # Insert - O(1)
s.remove(2)      # Delete - O(1)
print(3 in s)    # Search - O(1)
```

---

## 🧱 6. Stack (LIFO)
```python
stack = []
stack.append(10)  # Push - O(1)
stack.append(20)
print(stack[-1])  # Peek - O(1)
stack.pop()       # Pop - O(1)
```

---

## 🚪 7. Queue (FIFO)
```python
from collections import deque
q = deque()

q.append(1)    # Enqueue - O(1)
q.append(2)
print(q[0])    # Peek - O(1)
q.popleft()    # Dequeue - O(1)
```

---

## 🪢 8. Linked List
```python
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def insert_front(self, data):  # O(1)
        new = Node(data)
        new.next = self.head
        self.head = new

    def insert_end(self, data):  # O(n)
        new = Node(data)
        if not self.head:
            self.head = new
            return
        temp = self.head
        while temp.next:
            temp = temp.next
        temp.next = new

    def search(self, key):  # O(n)
        temp = self.head
        while temp:
            if temp.data == key:
                return True
            temp = temp.next
        return False

    def delete(self, key):  # O(n)
        temp = self.head
        if temp and temp.data == key:
            self.head = temp.next
            return
        prev = None
        while temp and temp.data != key:
            prev = temp
            temp = temp.next
        if temp:
            prev.next = temp.next
```

---

## 🌳 9. Binary Tree
```python
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left = self.right = None

# Inorder traversal - O(n)
def inorder(root):
    if root:
        inorder(root.left)
        print(root.val)
        inorder(root.right)
```

---

## 🔀 10. Sorting Algorithms

### Bubble Sort
```python
def bubble_sort(arr):  # O(n^2)
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]
```

### Merge Sort
```python
def merge_sort(arr):  # O(n log n)
    if len(arr) > 1:
        mid = len(arr)//2
        L = arr[:mid]
        R = arr[mid:]
        merge_sort(L)
        merge_sort(R)
        i = j = k = 0
        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                arr[k] = L[i]
                i += 1
            else:
                arr[k] = R[j]
                j += 1
            k += 1
        while i < len(L):
            arr[k] = L[i]
            i += 1
            k += 1
        while j < len(R):
            arr[k] = R[j]
            j += 1
            k += 1
```

---

## 🔗 11. Graphs
```python
# Adjacency List
graph = {
    'A': ['B', 'C'],
    'B': ['D'],
    'C': ['D'],
    'D': []
}

# BFS - O(V+E)
from collections import deque
def bfs(graph, start):
    visited = set()
    q = deque([start])
    while q:
        node = q.popleft()
        if node not in visited:
            visited.add(node)
            q.extend(graph[node])
    return visited

# DFS - O(V+E)
def dfs(graph, node, visited=None):
    if visited is None:
        visited = set()
    visited.add(node)
    for neighbor in graph[node]:
        if neighbor not in visited:
            dfs(graph, neighbor, visited)
    return visited
```

---

## 🧩 12. Searching

### Linear Search
```python
def linear_search(arr, x):  # O(n)
    for i in range(len(arr)):
        if arr[i] == x:
            return i
    return -1
```

### Binary Search
```python
def binary_search(arr, x):  # O(log n)
    l, r = 0, len(arr)-1
    while l <= r:
        mid = (l + r) // 2
        if arr[mid] == x:
            return mid
        elif arr[mid] < x:
            l = mid + 1
        else:
            r = mid - 1
    return -1
```

---

## 🎯 13. Greedy Example: Activity Selection
```python
activities = [(1, 4), (2, 3), (3, 5), (0, 6), (5, 7)]
activities.sort(key=lambda x: x[1])
res = [activities[0]]
for i in range(1, len(activities)):
    if activities[i][0] >= res[-1][1]:
        res.append(activities[i])
print(res)  # O(n log n)
```

---

## 🧠 14. Dynamic Programming

### Fibonacci
```python
def fib_dp(n):  # O(n)
    dp = [0, 1]
    for i in range(2, n+1):
        dp.append(dp[i-1] + dp[i-2])
    return dp[n]
```

### 0/1 Knapsack
```python
def knapsack(wt, val, W, n):  # O(n*W)
    dp = [[0 for _ in range(W+1)] for _ in range(n+1)]
    for i in range(n+1):
        for w in range(W+1):
            if i==0 or w==0:
                dp[i][w] = 0
            elif wt[i-1] <= w:
                dp[i][w] = max(val[i-1] + dp[i-1][w - wt[i-1]], dp[i-1][w])
            else:
                dp[i][w] = dp[i-1][w]
    return dp[n][W]
```

---

## 🧮 15. Bit Manipulation
```python
# Check if 3rd bit is set
n = 13
if n & (1 << 2):
    print("Bit is set")

# Set 2nd bit
n = n | (1 << 1)

# Unset 1st bit
n = n & ~(1 << 0)

# Toggle 0th bit
n = n ^ (1 << 0)
```

---

## ✅ Python Tips for DSA
- Use `deque` for O(1) queue
- Use `heapq` for priority queues
- Use `set()` and `dict()` for fast lookups
- Use `@lru_cache` for memoization in recursion
- Use `enumerate()` for index-value looping

---

## 📚 Recommended Practice Platforms
- [LeetCode](https://leetcode.com/)
- [GeeksforGeeks](https://www.geeksforgeeks.org/)
- [HackerRank](https://www.hackerrank.com/)
- [Coding Ninjas CodeStudio](https://www.codingninjas.com/codestudio)